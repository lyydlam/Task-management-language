/*
 * generated by Xtext 2.37.0
 */
package uk.ac.kcl.inf.languages.turtles.scoping


import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.TurtleProgram
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.eclipse.xtext.scoping.IScope
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.AddTask
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.GroupRefExpression
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.GroupDeclaration
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.EcoreUtil2

/**
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class TurtlesLanguageScopeProvider extends AbstractDeclarativeScopeProvider {
	/**
     * 为 AddTask 的 dependencies 提供作用域
     * —— 应该指向当前 TurtleProgram 中所有的 AddTask.id（字符串形式）
     */
    def IScope scope_AddTask_dependencies(AddTask context, EReference ref) {
        val program = EcoreUtil2.getContainerOfType(context, TurtleProgram)
        return Scopes.scopeFor(
            program?.statements.filter(typeof(AddTask))
        )
    }



     /**
     * 为 GroupRefExpression.group 提供作用域
     * —— 表达式中引用的 group 应该指向所有 GroupDeclaration.name
     */
    def IScope scope_GroupRefExpression_group(GroupRefExpression context, EReference ref) {
        val program = EcoreUtil2.getContainerOfType(context, TurtleProgram)
        return Scopes.scopeFor(
            program?.statements.filter(typeof(GroupDeclaration))
        )
    }
}

  

