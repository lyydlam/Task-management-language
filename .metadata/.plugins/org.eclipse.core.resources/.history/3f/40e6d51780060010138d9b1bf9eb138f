/*
 * generated by Xtext 2.37.0
 */
package uk.ac.kcl.inf.languages.turtles.scoping

import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.IntVarExpression
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.TurtleProgram
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.VariableDeclaration
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.eclipse.xtext.scoping.IScope
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.LoopStatement
import org.eclipse.emf.ecore.EObject

import static org.eclipse.xtext.scoping.Scopes.*
import static extension org.eclipse.xtext.EcoreUtil2.*
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.TaskReference
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.AddTask

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class TurtlesLanguageScopeProvider extends AbstractDeclarativeScopeProvider {
	/**
     * 解析 `IntVarExpression` 变量引用，确保变量在作用域内
     */
    def IScope scope_IntVarExpression_var (IntVarExpression context, EReference ref) {
        val containingLoopStatement = context.getContainerOfType(LoopStatement)

        if (containingLoopStatement !== null) {
            containingLoopStatement.visibleVariablesScope
        } else {
            val containingProgram = context.getContainerOfType(TurtleProgram)
            scopeFor(containingProgram.statements.filter(VariableDeclaration))
        }
    }
	/**
     * 解析 `LoopStatement` 作用域中的变量
     */
    def IScope visibleVariablesScope(EObject context) {
        if (context instanceof LoopStatement) {
            scopeFor(context.statements.filter(VariableDeclaration), context.eContainer.visibleVariablesScope)
        } else if (context instanceof TurtleProgram) {
            scopeFor(context.statements.filter(VariableDeclaration))
        }
    }
    /**
     * 解析 `depends_on` 语法中的 `AddTask` 引用，确保任务已定义
     */
    def IScope scope_AddTask_dependencies(AddTask context, EReference reference) {
        val program = context.getContainerOfType(TurtleProgram)
        return if (program !== null) 
            scopeFor(program.statements.filter(AddTask))
        else 
            IScope.NULLSCOPE
    }

    /**
     * 解析 `TaskReference`（即 `ref=[AddTask]`）中的 `AddTask` 引用
     */
    def IScope scope_TaskReference_ref(TaskReference context, EReference reference) {
        val program = context.getContainerOfType(TurtleProgram)
        return if (program !== null) 
            scopeFor(program.statements.filter(AddTask))
        else 
            IScope.NULLSCOPE
    }

    
}
