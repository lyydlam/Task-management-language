/*
 * generated by Xtext 2.37.0
 */
package uk.ac.kcl.inf.languages.turtles.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.TurnStatement
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.MoveStatement
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.LoopStatement
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.TurtleProgram
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.VariableDeclaration
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.Addition
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.IntExpression
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.Multiplication
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.IntVarExpression
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.IntLiteral
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.Statement
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.TurnCommand

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class TurtlesLanguageGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		if (resource === null || resource.contents.empty) {
        println("Resource is empty, skipping generation!")
        return
    }
		
		val model = resource.contents.head as TurtleProgram
		println("✅ Generating file for: " + model)
		
		val fileName = deriveTargetFileNameFor(model, resource)
    println("📝 Writing to file: " + fileName)
    
		fsa.generateFile(deriveTargetFileNameFor(model, resource), model.doGenerateClass)
		
		val className = resource.deriveClassNameFor
		println("📝 Writing Java class: " + className + ".java")
		fsa.generateFile(className + '.java', model.doGenerateClass(className))
	}
	
	def deriveTargetFileNameFor(TurtleProgram program, Resource resource) {
		resource.URI.appendFileExtension('txt').lastSegment
	}
	
	def deriveClassNameFor(Resource resource) {
		val origName = resource.URI.lastSegment
		
		origName.substring(0, origName.indexOf('.')).toFirstUpper + 'Turtle'
	}
	
	def doGenerateClass(TurtleProgram program) '''
		Program contains:
		
		- «program.eAllContents.filter(TurnStatement).size» turn commands
		- «program.eAllContents.filter(MoveStatement).size» move commands
		- «program.statements.filter(LoopStatement).size» top-level loops
		- «program.eAllContents.filter(VariableDeclaration).size» variable declarations
		DEBUG: «program.eAllContents.toList»
	'''
	
	def String doGenerateClass(TurtleProgram program, String className) '''
		import uk.ac.kcl.inf.szschaler.turtles.library.*
		
		public class «className» {

			public static void main (String[] args) {
				TurtlesFrame tf = new TurtlesFrame();
				
				Turtle t = new Turtle(tf) {
					@Override
					protected void run() {
						«program.statements.map[generateJavaStatement(new Environment)].join('\n')»
					}
				};
				
				t.run();
			}
		}
	'''
	
	private static class Environment {
		var int counter = 0
		
		def getFreshVarName() '''i«counter++»'''
		
		def exit() { counter-- }
	}
	
	dispatch def String generateJavaStatement(Statement stmt, Environment env) ''''''
	dispatch def String generateJavaStatement(MoveStatement stmt, Environment env) '''move«stmt.command.getName.toFirstUpper»(«stmt.steps.generateJavaExpression»);'''
	dispatch def String generateJavaStatement(TurnStatement stmt, Environment env) '''rotate(«if (stmt.command === TurnCommand.LEFT) {'''-'''}»«stmt.degrees»);'''
	dispatch def String generateJavaStatement(LoopStatement stmt, Environment env) {
		val freshVarName = env.getFreshVarName
		
		val result = '''
			for (int «freshVarName» = 0; «freshVarName» < «stmt.count.generateJavaExpression»; «freshVarName»++) {
				«stmt.statements.map[generateJavaStatement(env)].join('\n')»
			}
		'''
		
		env.exit
		
		result
	}
	dispatch def String generateJavaExpression(IntExpression exp) ''''''
	dispatch def String generateJavaExpression(Addition exp) '''
		(«exp.left.generateJavaExpression»«FOR idx: (0..exp.operator.size-1)» «exp.operator.get(idx)» «exp.right.get(idx).generateJavaExpression»«ENDFOR»)'''
	dispatch def String generateJavaExpression(Multiplication exp) '''
		«exp.left.generateJavaExpression»«FOR idx: (0..exp.operator.size-1)» «exp.operator.get(idx)» «exp.right.get(idx).generateJavaExpression»«ENDFOR»'''
	dispatch def String generateJavaExpression(IntLiteral exp) '''«exp.^val»'''
	dispatch def String generateJavaExpression(IntVarExpression exp) '''«exp.^var.value»'''
}


