package uk.ac.kcl.inf.languages.turtles.xpect

import com.google.inject.Inject
import org.eclipse.xpect.expectation.StringExpectation
import org.eclipse.xpect.parameter.Parameter
import org.eclipse.xpect.runner.ParameterizedXpect
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.xbase.lib.Functions.Function2
import org.junit.jupiter.api.extension.ExtendWith
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.AddTask
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.TaskStatus
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.TurtleProgram
import org.eclipse.xtext.testing.util.ParseHelper

@InjectWith(typeof(uk.ac.kcl.inf.languages.turtles.TurtlesLanguageInjectorProvider))
@ExtendWith(InjectionExtension)
class XPectTests {

    @Inject
    ParseHelper<TurtleProgram> parseHelper

    @ParameterizedXpect
    def void calculateTotalTime(CharSequence input, StringExpectation expectation) {
        val model = parseHelper.parse(input.toString)
        val totalTime = model.statements.filter(AddTask).filter[statusOf(model, it) != "completed"].
            map[it.requiredTime * it.repeatCount].reduce[p1, p2 | p1 + p2]
        expectation.assertEquals(totalTime.toString)
    }

    @ParameterizedXpect
    def void calculateTotalPeople(CharSequence input, StringExpectation expectation) {
        val model = parseHelper.parse(input.toString)
        val totalPeople = model.statements.filter(AddTask).map[it.peopleRequired].reduce[p1, p2 | p1 + p2]
        expectation.assertEquals(totalPeople.toString)
    }

    @ParameterizedXpect
    def void taskStatus(CharSequence input, @Parameter(name="id") String id, StringExpectation expectation) {
        val model = parseHelper.parse(input.toString)
        val task = model.statements.filter(AddTask).findFirst[it.id == id]
        val status = model.statements.filter(TaskStatus).findFirst[it.task.id == task.id]?.status?.toString ?: "unknown"
        expectation.assertEquals(status)
    }

    def String statusOf(TurtleProgram model, AddTask task) {
        val status = model.statements.filter(TaskStatus).findFirst[it.task.id == task.id]
        return if (status !== null) status.status.toString else "waiting"
    }
}
