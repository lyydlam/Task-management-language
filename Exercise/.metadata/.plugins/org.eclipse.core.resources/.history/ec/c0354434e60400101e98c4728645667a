/*
 * generated by Xtext 2.37.0
 */
package uk.ac.kcl.inf.languages.turtles.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.TurnStatement
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.MoveStatement
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.LoopStatement
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.TurtleProgram
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.VariableDeclaration

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class TurtlesLanguageGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.contents.head as TurtleProgram
		fsa.generateFile(deriveTargetFileNameFor(model, resource), model.generate)
	}
	
	def deriveTargetFileNameFor(TurtleProgram program, Resource resource) {
		
		resource.URI.appendFileExtension('txt').lastSegment
	}
	
	def generate(TurtleProgram program) '''
		Program contains:
		
		- «program.eAllContents.filter(TurnStatement).size» turn commands
		- «program.eAllContents.filter(MoveStatement).size» move commands
		- «program.statements.toList.filter(typeof(LoopStatement)).size» top-level loops
		- «program.eAllContents.toList.filter(typeof(VariableDeclaration)).size» variable declarations
	'''
}

