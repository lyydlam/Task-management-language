/*
 * generated by Xtext 2.37.0
 */
package uk.ac.kcl.inf.languages.turtles.generator

import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class TurtlesLanguageGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.contents.head as TaskManProgram
		fsa.generateFile(resource.deriveStatsTargetFileNameFor, model.doGenerateStats)
		
		val className = resource.deriveClassNameFor
		fsa.generateFile(className + '.java', model.doGenerateClass(className))
	}
	
	def deriveStatsTargetFileNameFor(TaskManProgram program,Resource resource) {
		resource.URI.appendFileExtension('txt').lastSegment
	}
	
	def deriveClassNameFor(Resource resource) {
		val origName = resource.URI.lastSegment
		
		origName.substring(0, origName.indexOf('.')).toFirstUpper + 'Model'
	}
	
	def String doGenerateStats(TaskManProgram program) '''
		Program contains:
		
		- «model.eAllContents.filter(AddTask).size» turn commands
		- «model.eAllContents.filter(RemoveTask).size» move commands
		- «model.statements.filter(MarkTaskCompleted).size» top-level loops
		- «model.eAllContents.filter(TimeCalculation).size» variable declarations
		- «model.statements.filter(TaskStatus).size» task status checks
		- System total time: «calculateSystemTime(model)» minutes
		Task Details:
		«FOR task : model.statements.filter(typeof(AddTask))»
		    - Task ID: «task.id»
		      Name: «task.name»
		      Required Time: «getTaskTotalTime(model, task)» minutes
		      Priority: «task.priority»
		      Dependencies: «IF task.dependencies !== null THEN task.dependencies.map[it.id].join(", ") ELSE "None"»
		      Repeat Count: «IF task.repeatCount !== null THEN task.repeatCount ELSE "No Repeat"»
		 «ENDFOR»
		    '''
		
		    /**
		     * 计算系统总时间（所有任务的 `requiredTime × repeatCount` 之和）
		     */
		private def double calculateSystemTime(Model model) {
		    var totalTime = 0.0
		    for (task : model.statements.filter(typeof(AddTask))) {
		        totalTime += getTaskTotalTime(model, task)
		    }
		    return totalTime
		}
		
		    /**
		     * 计算单个任务的总时间（考虑 `repeatCount`）
		     */
		private def double getTaskTotalTime(Model model, AddTask task) {
		    var repeatCount = task.repeatCount ?: 1
		    return task.requiredTime * repeatCount
		}
}


	
	