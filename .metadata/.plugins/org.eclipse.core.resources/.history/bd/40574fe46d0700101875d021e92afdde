/*
 * generated by Xtext 2.37.0
 */
package uk.ac.kcl.inf.languages.turtles.validation
import org.eclipse.xtext.validation.Check;

import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.AddTask
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.TurtleProgram

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class TurtlesLanguageValidator extends AbstractTurtlesLanguageValidator {
	@Check
	def checkNoCircularDependencies(AddTask task) {
        val dependencies = task.dependencies
        if (dependencies.exists[it.dependencies.contains(task)]) {
            error("Circular dependency detected", null)
        }
    }

    @Check
    def checkPriorityIsPositive(AddTask task) {
        if (task.priority <= 0) {
            error("Priority must be positive", null)
        }
    }

    @Check
    def checkTaskIdIsUnique(AddTask task) {
        val program = task.eContainer as TurtleProgram
        val tasks = program.statements.filter(AddTask)
        if (tasks.exists[it.id == task.id && it != task]) {
            error("Task ID must be unique", null)
        }
    }



}

	

