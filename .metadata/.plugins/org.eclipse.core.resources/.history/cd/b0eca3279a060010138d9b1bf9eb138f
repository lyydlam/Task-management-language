/*
 * generated by Xtext 2.37.0
 */
package uk.ac.kcl.inf.languages.turtles.generator

import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IGeneratorContext
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.AddTask
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.RemoveTask
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.MarkTaskCompleted
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.TimeCalculation
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.TaskStatus
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.TurtleProgram

/**
 * 负责生成代码（如任务调度逻辑、时间计算等）
 * 代码生成器
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class TurtlesLanguageGenerator extends AbstractGenerator {

    override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
        val model = resource.contents.head as TurtleProgram
        fsa.generateFile(deriveTargetFileNameFor(model, resource), model.doGenerate)
    }

    def deriveTargetFileNameFor(TurtleProgram program, Resource resource) {
        resource.URI.appendFileExtension('txt').lastSegment
    }

    def String doGenerate(TurtleProgram program) '''
        Program contains:
        - «program.eAllContents.filter(AddTask).size» turn commands
        - «program.eAllContents.filter(RemoveTask).size» move commands
        - «program.statements.filter(MarkTaskCompleted).size» top-level loops
        - «program.eAllContents.filter(TimeCalculation).size» variable declarations
        - «program.statements.filter(TaskStatus).size» task status checks
        - System total time: «calculateSystemTime(program)» minutes
        Task Details:
        «FOR task : program.statements.filter(AddTask)»
            - Task ID: «task.id»
              Name: «task.name»
              Required Time: «getTaskTotalTime(program, task)» minutes
              Priority: «task.priority»
              Dependencies: «task.dependencies.map[it.id].join(", ")»
              Repeat Count: «task.repeatCount»
              Status: «getTaskStatus(program, task)»
        «ENDFOR»
    '''

    def getTaskStatus(TurtleProgram program, AddTask task) {
        val statusStatement = program.statements.filter(TaskStatus).findFirst[it.task.id == task.id]
        if (statusStatement !== null) statusStatement.status.toString() else "unknown"
    }


    def double getTaskTotalTime(TurtleProgram program, AddTask task) {
        task.requiredTime * task.repeatCount
    }

    def double calculateSystemTime(TurtleProgram program) {
        var totalTime = 0.0
        for (task : program.statements.filter(typeof(AddTask))) {
            totalTime += getTaskTotalTime(program, task)
        }
        return totalTime
    }
}

	
	