/*
 * generated by Xtext 2.37.0
 */
package uk.ac.kcl.inf.languages.turtles.scoping


import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.TurtleProgram
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.eclipse.xtext.scoping.IScope
import org.eclipse.emf.ecore.EObject

import static org.eclipse.xtext.scoping.Scopes.*
import static extension org.eclipse.xtext.EcoreUtil2.*
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.AddTask
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.GroupRefExpression
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.GroupDeclaration

/**
 * 负责解析变量引用、任务依赖关系和任务引用，确保它们在作用域内
 * 作用域解析器
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class TurtlesLanguageScopeProvider extends AbstractDeclarativeScopeProvider {
	//解析 `IntVarExpression` 变量引用，确保变量在作用域内
	

    //解析 `depends on` 语法中的 `AddTask` 引用，确保任务已定义，循环依赖
    def IScope scope_AddTask_dependencies(AddTask context, EReference reference) {
        val program = context.getContainerOfType(TurtleProgram)
    	if (program === null) return IScope.NULLSCOPE
        val tasks = program.statements.filter(AddTask)
        return scopeFor(tasks)
    }

    //"people DevTeam + 1"
    def IScope scope_GroupRefExpression_group(GroupRefExpression context, EReference ref) {
    val program = context.getContainerOfType(TurtleProgram)
    return scopeFor(program.statements.filter(GroupDeclaration))
}
    

}

  

