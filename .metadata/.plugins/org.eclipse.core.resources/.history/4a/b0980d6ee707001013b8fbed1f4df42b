/*
 * generated by Xtext 2.37.0
 */
package uk.ac.kcl.inf.languages.turtles.scoping

import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.IntVarExpression
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.TurtleProgram
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.VariableDeclaration
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.eclipse.xtext.scoping.IScope
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.LoopStatement
import org.eclipse.emf.ecore.EObject

import static org.eclipse.xtext.scoping.Scopes.*
import static extension org.eclipse.xtext.EcoreUtil2.*
import uk.ac.kcl.inf.languages.turtles.turtlesLanguage.AddTask

/**
 * 负责解析变量引用、任务依赖关系和任务引用，确保它们在作用域内
 * 作用域解析器
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class TurtlesLanguageScopeProvider extends AbstractDeclarativeScopeProvider {
	//解析 `IntVarExpression` 变量引用，确保变量在作用域内
	
    def IScope scope_IntVarExpression_var (IntVarExpression context, EReference ref) {
        vxal containingLoopStatement = context.getContainerOfType(LoopStatement)

        if (containingLoopStatement !== null) {
            containingLoopStatement.visibleVariablesScope
        } else {
            val containingProgram = context.getContainerOfType(TurtleProgram)
            scopeFor(containingProgram.statements.filter(VariableDeclaration))
        }
    }
	//解析 `LoopStatement` 作用域中的变量

    def IScope visibleVariablesScope(EObject context) {
        if (context instanceof LoopStatement) {
            scopeFor(context.statements.filter(VariableDeclaration), context.eContainer.visibleVariablesScope)
        } else if (context instanceof TurtleProgram) {
            scopeFor(context.statements.filter(VariableDeclaration))
        }
    }
    //解析 `depends on` 语法中的 `AddTask` 引用，确保任务已定义，循环依赖
    def IScope scope_AddTask_dependencies(AddTask context, EReference reference) {
        val program = context.getContainerOfType(TurtleProgram)
    if (program === null) {
        return IScope.NULLSCOPE
    }

    if (hasCircularDependency(context, program)) {
        throw new IllegalStateException("Circular dependency detected")
    }

    val tasks = program.statements.filter(AddTask)
    return scopeFor(tasks)
    }

    //解析 `TaskReference`（即 `ref=[AddTask]`）中的 `AddTask` 引用

    def boolean hasCircularDependency(AddTask task, TurtleProgram program) {
    val tasks = program.statements.filter(AddTask)
    return tasks.exists[it.dependencies.contains(task)]
	}
}

  

